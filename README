# SigFIM
SigFIM is a small File Integrity Montor (FIM) CLI tool that verifies the integrity of files against corruption or tampering.

This tool uses the hash function [SHA256](https://it.wikipedia.org/wiki/Secure_Hash_Algorithm) (industry standard due to strong resistance to collisions) to files inside the list (the .YAML file) that we want to monitor, and saves a "digested" version of each file, saving them inside the .JSON archive. This permits us verify and recalculate the hashes from the file system and compare them with the ones in the archive if a file has been tampered or modified it will be reported.
The tool also uses [EdDSA25519](https://en.wikipedia.org/wiki/EdDSA) which uses [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic_curve) for digitally signing the archive, EdDSA was chosen since it is one of the fastest digital
signatures algorithms without sacrificing security and simplicity, in particular Curve25519 was chosen since it's notably fast and designed to be robust against common attacks, providing a solid choice for integrity verification.
 
So, this project uses:
- SHA256 for hashing
- EdDSA25519 for digital signatures
- PEM for storing the private and public keys
- JSON for storing an archive of hashes
- YAML for manual configuration

### Manual
We may start by running the command
```
python monitor.py --gen
```
which will query us with a password that will be requested when we want to modify the archive, this command generates a private and public key stored in the .pem files.
After inserting the absolute file paths in the ```config.yaml``` file under the ```to-monitor``` section, we may now want to store their hashes. We do so with
```
python monitor.py --store
````
this command will store the hashes in the archive.json and will also digitally sign it, and produce a signature to compare to.
Lastly, we may run the following to check the validity of our data
```
python monitor.py --verify
```
